/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IProductsClient {
    getAll(): Observable<ProductsListVM>;
    create(command: UpsertProductCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class ProductsClient implements IProductsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<ProductsListVM> {
        let url_ = this.baseUrl + "/api/Products";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<ProductsListVM>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductsListVM>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ProductsListVM> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductsListVM.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductsListVM>(<any>null);
    }

    create(command: UpsertProductCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Products";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }
}

export class ProductsListVM implements IProductsListVM {
    products?: ProductsListDTO[] | undefined;
    count?: number;

    constructor(data?: IProductsListVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(ProductsListDTO.fromJS(item));
            }
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): ProductsListVM {
        data = typeof data === 'object' ? data : {};
        let result = new ProductsListVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        data["count"] = this.count;
        return data; 
    }
}

export interface IProductsListVM {
    products?: ProductsListDTO[] | undefined;
    count?: number;
}

export class ProductsListDTO implements IProductsListDTO {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    price?: number | undefined;
    oldPrice?: number | undefined;
    newPrice?: number | undefined;
    stockQuantity?: number;
    lowStock?: boolean;
    onStock?: boolean;
    isNew?: boolean;

    constructor(data?: IProductsListDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.price = _data["price"];
            this.oldPrice = _data["oldPrice"];
            this.newPrice = _data["newPrice"];
            this.stockQuantity = _data["stockQuantity"];
            this.lowStock = _data["lowStock"];
            this.onStock = _data["onStock"];
            this.isNew = _data["isNew"];
        }
    }

    static fromJS(data: any): ProductsListDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ProductsListDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["price"] = this.price;
        data["oldPrice"] = this.oldPrice;
        data["newPrice"] = this.newPrice;
        data["stockQuantity"] = this.stockQuantity;
        data["lowStock"] = this.lowStock;
        data["onStock"] = this.onStock;
        data["isNew"] = this.isNew;
        return data; 
    }
}

export interface IProductsListDTO {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    price?: number | undefined;
    oldPrice?: number | undefined;
    newPrice?: number | undefined;
    stockQuantity?: number;
    lowStock?: boolean;
    onStock?: boolean;
    isNew?: boolean;
}

export class UpsertProductCommand implements IUpsertProductCommand {
    id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
    price?: number | undefined;
    oldPrice?: number | undefined;
    newPrice?: number | undefined;
    stockQuantity?: number;
    minStockQuantity?: number;
    displayStockQuantity?: boolean;
    notifyForQuantityBelow?: boolean;
    orderMinimumQuantity?: number | undefined;
    orderMaximumQuantity?: number | undefined;
    markAsNew?: boolean;
    markAsNewStartDateTimeUtc?: Date | undefined;
    markAsNewEndDateTimeUtc?: Date | undefined;
    weight?: number;
    length?: number;
    width?: number;
    height?: number;
    availableStartDateTimeUtc?: Date | undefined;
    availableEndDateTimeUtc?: Date | undefined;
    viewed?: number;

    constructor(data?: IUpsertProductCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.price = _data["price"];
            this.oldPrice = _data["oldPrice"];
            this.newPrice = _data["newPrice"];
            this.stockQuantity = _data["stockQuantity"];
            this.minStockQuantity = _data["minStockQuantity"];
            this.displayStockQuantity = _data["displayStockQuantity"];
            this.notifyForQuantityBelow = _data["notifyForQuantityBelow"];
            this.orderMinimumQuantity = _data["orderMinimumQuantity"];
            this.orderMaximumQuantity = _data["orderMaximumQuantity"];
            this.markAsNew = _data["markAsNew"];
            this.markAsNewStartDateTimeUtc = _data["markAsNewStartDateTimeUtc"] ? new Date(_data["markAsNewStartDateTimeUtc"].toString()) : <any>undefined;
            this.markAsNewEndDateTimeUtc = _data["markAsNewEndDateTimeUtc"] ? new Date(_data["markAsNewEndDateTimeUtc"].toString()) : <any>undefined;
            this.weight = _data["weight"];
            this.length = _data["length"];
            this.width = _data["width"];
            this.height = _data["height"];
            this.availableStartDateTimeUtc = _data["availableStartDateTimeUtc"] ? new Date(_data["availableStartDateTimeUtc"].toString()) : <any>undefined;
            this.availableEndDateTimeUtc = _data["availableEndDateTimeUtc"] ? new Date(_data["availableEndDateTimeUtc"].toString()) : <any>undefined;
            this.viewed = _data["viewed"];
        }
    }

    static fromJS(data: any): UpsertProductCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpsertProductCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["price"] = this.price;
        data["oldPrice"] = this.oldPrice;
        data["newPrice"] = this.newPrice;
        data["stockQuantity"] = this.stockQuantity;
        data["minStockQuantity"] = this.minStockQuantity;
        data["displayStockQuantity"] = this.displayStockQuantity;
        data["notifyForQuantityBelow"] = this.notifyForQuantityBelow;
        data["orderMinimumQuantity"] = this.orderMinimumQuantity;
        data["orderMaximumQuantity"] = this.orderMaximumQuantity;
        data["markAsNew"] = this.markAsNew;
        data["markAsNewStartDateTimeUtc"] = this.markAsNewStartDateTimeUtc ? this.markAsNewStartDateTimeUtc.toISOString() : <any>undefined;
        data["markAsNewEndDateTimeUtc"] = this.markAsNewEndDateTimeUtc ? this.markAsNewEndDateTimeUtc.toISOString() : <any>undefined;
        data["weight"] = this.weight;
        data["length"] = this.length;
        data["width"] = this.width;
        data["height"] = this.height;
        data["availableStartDateTimeUtc"] = this.availableStartDateTimeUtc ? this.availableStartDateTimeUtc.toISOString() : <any>undefined;
        data["availableEndDateTimeUtc"] = this.availableEndDateTimeUtc ? this.availableEndDateTimeUtc.toISOString() : <any>undefined;
        data["viewed"] = this.viewed;
        return data; 
    }
}

export interface IUpsertProductCommand {
    id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
    price?: number | undefined;
    oldPrice?: number | undefined;
    newPrice?: number | undefined;
    stockQuantity?: number;
    minStockQuantity?: number;
    displayStockQuantity?: boolean;
    notifyForQuantityBelow?: boolean;
    orderMinimumQuantity?: number | undefined;
    orderMaximumQuantity?: number | undefined;
    markAsNew?: boolean;
    markAsNewStartDateTimeUtc?: Date | undefined;
    markAsNewEndDateTimeUtc?: Date | undefined;
    weight?: number;
    length?: number;
    width?: number;
    height?: number;
    availableStartDateTimeUtc?: Date | undefined;
    availableEndDateTimeUtc?: Date | undefined;
    viewed?: number;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}